# -*- coding: utf-8 -*-
"""Copy of Chapter 10

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1txAnqYhoBRM8yUYbGfObutD5op402Ro5
"""

import pandas as pd
import random
from datetime import datetime, timedelta
import altair as alt

"""
This script simulates weekly sales data for various stores over a year, calculates the variance of the weekly sales
totals for each store, and visualizes the variance using Altair. The results are stored in a DataFrame and visualized
as a histogram.
"""

class SalesDataGenerator:
    """
    This class generates weekly sales data for a list of stores over the course of a year.
    """
    def __init__(self, cities, start_date, end_date):
        self.cities = cities
        self.start_date = start_date
        self.end_date = end_date
        self.all_stores_all_weekly_sales = []

    def generate_sales_data(self):
        """
        Generates weekly sales data for each store and stores it in a DataFrame.
        """
        current_date = self.start_date
        while current_date <= self.end_date:
            weekly_totals_per_store = []  # Initialize per-week data
            week_name = current_date.strftime('%B-%d-%Y')
            current_date += timedelta(days=7)  # Move to the next week

            # Create dictionaries for each city
            for city in self.cities:
                store_name = city
                weekly_sales_total = random.randint(100000, 1000000)
                store_dict = {'KBP': store_name, 'weekly_sales_total': weekly_sales_total, 'week': week_name}
                weekly_totals_per_store.append(store_dict)

            # Append weekly data to the master list
            self.all_stores_all_weekly_sales.extend(weekly_totals_per_store)

        return pd.DataFrame(self.all_stores_all_weekly_sales)

class SalesVarianceAnalyzer:
    """
    This class calculates the variance of weekly sales totals for each store and visualizes the variance.
    """
    def __init__(self, sales_data):
        self.sales_data = sales_data

    def calculate_variance(self):
        """
        Calculates the variance of weekly sales totals for each store.
        """
        return self.sales_data.groupby('KBP')['weekly_sales_total'].var().rename("variance").reset_index()

    def plot_variance(self, variance_data):
        """
        Plots the variance data using Altair.
        """
        # Define the color scale with a midpoint
        color_scale = alt.Scale(scheme='blueorange', domainMid=0)

        # Create the histogram
        histogram = alt.Chart(variance_data).mark_bar().encode(
            x=alt.X('KBP:N', title='Store Name'),
            y=alt.Y('variance:Q', title='Variance'),
            color=alt.Color('variance:Q', scale=color_scale, legend=None),
            tooltip=['KBP:N', 'variance:Q']
        ).properties(
            width=800,
            title='Annual Sales Variance by Store'
        )

        return histogram

# List of cities
cities = ['Nuevo', 'Tustin', 'LA', 'Fullerton', 'New York', 'Egghead', 'Skypia', 'Wano']

# Generate weekly sales data for each week in 2024
start_date = datetime(2024, 1, 1)
end_date = datetime(2024, 12, 31)

# Create SalesDataGenerator instance and generate sales data
data_generator = SalesDataGenerator(cities, start_date, end_date)
sales_data = data_generator.generate_sales_data()

# Create SalesVarianceAnalyzer instance, calculate variance, and plot variance
variance_analyzer = SalesVarianceAnalyzer(sales_data)
variance_data = variance_analyzer.calculate_variance()
variance_histogram = variance_analyzer.plot_variance(variance_data)

# Display the histogram
variance_histogram.display()